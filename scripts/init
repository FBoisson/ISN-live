#!/bin/sh

# hardcoded configurable options
# Default maximum size of dynamic ramdisk in kilobytes
RAMSIZE=1000000
# End of options

# Don't allow interrupt signals
trap "" 1 2 3 15

# USB modules (adapt√© pour 2.6 USB 2)
# modules USB usuels
MINIMAL="usb-storage sg"
USB_MODULES="usbcore ehci-hcd ohci-hcd uhci-hcd usb-libusual"
# modules USB deuxi√®me partie
USB_MODULES_BIS="sl811-hcd isp116x-hcd r8a66597-hcd"
# modules SATA
SATA_MODULES="ahci pata_sis ata_piix sata_inic162x sata_promise sata_sil sata_sx4 sata_vsc sata_mv sata_qstor sata_sis sata_uli sata_nv sata_sil24 sata_svw sata_via"
SCSI_MODULES=""
# module SQUASHFS
SQUASHFS_MODULE="/lib/modules/2.6.36-clefagreg6.5/kernel/fs/squashfs/squashfs.ko"
NOYAU="/lib/modules/2.6.36-clefagreg6.5"


AGREG_DIR=agreg
AGREG_NAME=agreg

# h√©ritage de Knoopix, on garde
# Clean input/output
exec >/dev/console </dev/console 2>&1
# echo "Console effacee" 
# Reset fb color mode
RESET="]R"
# ANSI COLORS
# Erase to end of line
CRE="[K"
# Clear and reset Screen
CLEAR="c"
# Normal color
NORMAL="[0;39m"
# RED: Failure or error message
RED="[1;31m"
# GREEN: Success message
GREEN="[1;32m"
# YELLOW: Descriptions
YELLOW="[1;33m"
# BLUE: System mesages
BLUE="[1;34m"
# MAGENTA: Found devices or drivers
MAGENTA="[1;35m"
# CYAN: Questions
CYAN="[1;36m"
# BOLD WHITE: Hint
WHITE="[1;37m"


echo ""
echo "Clef AGREG, F. Boisson, 2007-2010"
echo ""
echo ""
# 
PATH=/bin:/sbin
export PATH

umask 022

# Mount /proc and /dev/pts
mount -t proc /proc /proc
# Disable kernel messages while probing modules in autodetect mode
#echo "0" > /proc/sys/kernel/printk

mount -t devpts /dev/pts /dev/pts
mount -t sysfs /sys /sys >/dev/null 2>&1
CMDLINE="$(cat /proc/cmdline)"

# echo $CMDLINE #D 


# Fonction de chargement de modules
loadmodules(){
TYPE="$1"
shift
#echo "6" > /proc/sys/kernel/printk
echo  "Chargement modules ${TYPE}: $@"
for i in "$@"; do
echo "... ${TYPE}: $i"
modprobe $i
done
#echo "0" > /proc/sys/kernel/printk
}
# 
# Chargement automatique des modules
echo "D√©tection des modules √† charger"
find /sys -name modalias | xargs -n 1 cat > /tmp/perif
MODULES_A_CHARGER=`/bin/listmodule.sh /tmp/perif | sort -u`
for MOD in $MODULES_A_CHARGER ; do
    echo "... "$MOD
    modprobe $MOD
done
for MOD in $MINIMAL ; do
    echo "... "$MOD
    modprobe $MOD
done
sleep 10
trouveagreg UIS
if [ $? -eq 1 ] ; then
    echo "Reconnaissance automatique rat√©e, essai syst√©matique"
    echo "Chargement des modules USB"
#echo "0" > /proc/sys/kernel/printk
    loadmodules USB $USB_MODULES
    mount -t usbfs procbususb /proc/bus/usb
    sleep 1
# D√©lai assez long pour reconnaitre une clef
    sleep 10
#echo "0" > /proc/sys/kernel/printk
    
# echo "On va monter la clef" 
    
# Mount USB sur /cdrom
# lsmod
# Bon on cherche d'abord l'Usb, puis l'Ide et enfin le Scsi
    trouveagreg U
    if [ $? -eq 1 ] ; then
# rat√©, USB deuxi√®me s√©rie
	echo "Chargement des modules USB.. la suite"
#echo "0" > /proc/sys/kernel/printk
	loadmodules USB $USB_MODULES_BIS
# lsmod
	sleep 1
	mount -t usbfs procbususb /proc/bus/usb
# ronfl
	sleep 10
# mount
#echo "0" > /proc/sys/kernel/printk
	trouveagreg U
	if [ $? -eq 1 ] ; then
	    for i in $USB_MODULES_BIS ; do
		echo  "Suppression module... $i"
		rmmod -f $i >/dev/null 2>&1
	    done
	    
# on essaye avec un chargement de module intelligent
# on recommence avec le SATA
	    loadmodules SCSI $SATA_MODULES
	    sleep 10
	    trouveagreg S
	fi
    fi
fi

# l√† on esp√®re que /cdrom est mont√©
sleep 1
# mount
# ls -l /cdrom
# Disable kernel messages again
#echo"0" > /proc/sys/kernel/printk


FOUND_AGREG="Trouve"

# echo "Bon la on a trouv√© AGREG" #D 

# on charge unionfs, inutile noyau aufs

#modprobe unionfs


mount_agreg()
{
# echo appel de mount_agreg #D 
    echo "Fichier:" $1/$AGREG_DIR/$AGREG_NAME
    if test -n "$FOUND_AGREG" ; then
	echo "Agreg trouve..."
#       mount #D
    fi
    if test -n "$FOUND_AGREG" -a -f $1/$AGREG_DIR/$AGREG_NAME; then
    # DEBUG
	echo "6" > /proc/sys/kernel/printk
#	insmod $CLOOP_MODULE file=$1/$AGREG_DIR/$AGREG_NAME
#	mount /dev/cloop /AGREG -o ro || FOUND_AGREG=""
#	insmod $SQUASHFS
	mount $1/$AGREG_DIR/$AGREG_NAME /AGREG -t squashfs -o loop || FOUND_AGREG=""
 #    mount #D
 #    echo ">"$FOUND_AGREG"<" #D
    fi
}


# echo On va appeler mount_agreg #D 
mount_agreg /cdrom
#echo ">"$FOUND_AGREG"<" #D

# Est ce que tout va bien?
if test -n "$FOUND_AGREG"
then
# echo oui, c'est parti 
cat /AGREG/etc/ld.so.cache > /etc/ld.so.cache
echo ""

# Enable kernel messages
echo "6" > /proc/sys/kernel/printk

# Set paths
echo -n "Setting paths..."
PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:."
export PATH

# Debian weirdness
# echo copie alternatives #D 
/AGREG/bin/cp -a /AGREG/etc/alternatives /etc/ 2>/dev/null

# Remplacement de /bin et /sbin inutile
# echo ...le sbin et le bin #D 


#mv /bin bin.old
#/bin.old/ln -sf /AGREG/bin /bin
#mv /sbin sbin.old
#/bin.old/ln -sf /AGREG/sbin /sbin
#mv /lib /lib.old
#ln -sf /AGREG/lib /lib

hash -r


# nettoyage de /etc/mtab avec une entr√©e pour le cloop

egrep " /AGREG | /cdrom " /proc/mounts | sed 's|/dev/loop0 /cdrom \(.*\) 0 0|'$LOOP_SOURCE$ISO_PATH' /cdrom/ \1,loop=/dev/loop0 0 0|g' >> /etc/mtab


# la m√©moire pour la taille du RAMDISK, vient de Knoopix
FOUNDMEM="$(awk '/MemTotal/{print $2}' /proc/meminfo)"
TOTALMEM="$(awk 'BEGIN{m=0};/MemFree|Cached/{m+=$2};END{print m}' /proc/meminfo)"

# Now we need to use a little intuition for finding a ramdisk size
# that keeps us from running out of space, but still doesn't crash the
# machine due to lack of Ram

# Minimum size of additional ram partitions
MINSIZE=2000
# At least this much memory minus 30% should remain when home and var are full.
MINLEFT=16000
# Maximum ramdisk size
MAXSIZE="$(expr $TOTALMEM - $MINLEFT)"
# Default ramdisk size for ramdisk
RAMSIZE="$(expr $TOTALMEM / 5)"
# echo TestRam $RAMSIZE #D 
# Check for sufficient memory to mount extra ramdisk for /home + /var
if test -n "$TOTALMEM" -a "$TOTALMEM" -gt "$MINLEFT"; then
    test -z "$RAMSIZE" && RAMSIZE=1000000
    mkdir -p /ramdisk
# tmpfs/varsize version, can use swap
    RAMSIZE=$(expr $RAMSIZE \* 4)
    echo -n "Creating /ramdisk dynamic size=${RAMSIZE}k on shared memory..."
# We need /bin/mount here for the -o size= option
    echo Creation ramdisk $RAMSIZE
    
    mount -t tmpfs -o "size=${RAMSIZE}k" /ramdisk /ramdisk && mkdir -p /ramdisk/home /ramdisk/var && ln -s /ramdisk/home /ramdisk/var /
    echo "Done."
    mv /etc /ramdisk
    ln -s /ramdisk/etc /etc
else
    mkdir -p /home /var
fi
echo -n "Fabrication du RAMDISK..."
# Create common WRITABLE (empty) dirs
mkdir -p /var/run /var/backups /var/cache/apache /var/local /var/lock/news \
         /var/nis /var/preserve /var/state/misc /var/tmp /var/lib \
	 /var/spool/cups/tmp /var/lib/samba \
         /mnt/cdrom /mnt/floppy  \
        /root /etc/sysconfig /etc/X11 /etc/cups /etc/dhcpc
mkdir -p /ramdisk/mnt/cdrom /ramdisk/mnt/floppy /ramdisk/mnt/hd /ramdisk/mnt/test \
        /ramdisk/root /ramdisk/etc/sysconfig /ramdisk/etc/X11 /ramdisk/etc/cups /ramdisk/etc/dhcpc
chmod 1777 /var/tmp
chmod 1777 /var/lock

# le r√©pertoire utilisateur avec ce qu'il faut dessus
mkdir /home/agreg
# incomplet, on oublie une partie des modifications avec les extensions

# Create empty utmp and wtmp
:> /var/run/utmp
:> /var/run/wtmp

if [ -f /etc/resolv.conf ] ; then
    rm /etc/resolv.conf
fi
# on recopie la ligne de commande
echo $CMDLINE > /etc/cmdlineboot
touch /etc/resolv.conf

rm -rf /etc/ftpusers /etc/passwd /etc/shadow /etc/group \
        /etc/ppp /etc/isdn /etc/ssh /etc/ioctl.save \
        /etc/inittab /etc/network /etc/sudoers \
        /etc/init /etc/localtime /etc/dhcpc /etc/pnm2ppa.conf 2>/dev/null

# on met le bon init
mv /etc/init.sh /etc/init

# Extremely important, init crashes on shutdown if this is only a link
:> /etc/ioctl.save
:> /etc/pnm2ppa.conf
# Must exist for samba to work
[ -d /var/lib/samba ] && :> /var/lib/samba/unexpected.tdb

# inutile avec unionfs

df
echo "...RAMDISK fini."

# Mis en place du modprobe au cas o√π
# bon le unionfs
echo "/sbin/modprobe" > /proc/sys/kernel/modprobe


echo "Initialisation du syst√®me"
mkdir /ROOT
cd /
mount -t aufs aufs /ROOT -o dirs=/ramdisk=rw:/AGREG=ro
# le pivot root ne marche pas ici scrogneugneu, usage de run-init

mkdir /ROOT/oldroot
cd /ROOT

# recherche d'une extension
RAJOUT=""
INDICE=1
if [ -f /cdrom/ordre_extensions ] ; then
    LISTE_EXT=`cat /cdrom/ordre_extensions | sed -e 's|^|/cdrom/agreg/|'`
else
    LISTE_EXT=`ls -tr /cdrom/agreg/extension*.sqh`
fi
for fichier in $LISTE_EXT ; do
#while [ -f /cdrom/agreg/extension$NUMERO.sqh ] ; do
    if [ ! -b /dev/loop$INDICE ] ; then
	cd /dev
	mknod loop$INDICE b 7 $INDICE
	cd /ROOT
    fi
    INDICE=`expr $INDICE + 1`
    DIR=`echo $fichier | sed -e 's/^.*\(extension.*\).sqh/\1/'`
    echo Installation de $DIR
    mkdir -p /$DIR
    mount $fichier /$DIR -t squashfs -o loop
    RAJOUT=:/$DIR=ro+wh$RAJOUT
done

# recherche extension externe
mkdir -p /extensions
if /bin/trouvefichier UIS /extensions extensions_agreg ; then
    for fichier in `cat /extensions/extensions_agreg` ; do
#while [ -f /cdrom/agreg/extension$NUMERO.sqh ] ; do
	if [ ! -b /dev/loop$INDICE ] ; then
	    cd /dev
	    mknod loop$INDICE b 7 $INDICE
	    cd /ROOT
	fi
	INDICE=`expr $INDICE + 1`
	DIR=`echo $fichier | sed -e 's/^.*\(extension.*\).sqh/\1/'`
	echo Installation de $DIR
	mkdir -p /$DIR
	mount /extensions/agreg/$fichier /$DIR -t squashfs -o loop
	RAJOUT=:/$DIR=ro+wh$RAJOUT
    done
fi
umount /dev/pts
mv /dev /ramdisk
echo Assemblage des repertoires
mount -t aufs aufs /ROOT -o dirs=/ramdisk=rw$RAJOUT:/AGREG=ro
if [ ! -d /ROOT/oldroot ] ; then
    mkdir /ROOT/oldroot
fi
if [ ! -d /ROOT/proc ] ; then 
    mkdir /ROOT/proc
fi
if [ ! -d /ROOT/sys ] ; then
    mkdir /ROOT/sys
fi
echo Fabrication de /home/agreg
# mis √† jour de /home/agreg
# (cd /ROOT/etc/skel ; tar c .) | (cd /ramdisk/home/agreg ; tar x)
if [ -f /cdrom/home.tar.bfe ] ; then
# cas d'un cryptage
PASSWD=`cat /proc/cmdline | grep clefcodage | sed -e 's/^.*clefcodage="\(.*\)".*$/\1/'`
if [ ! -z $PASSWD ] ; then 
    echo $PASSWD > /ramdisk/home/.clefcodage
fi
if [ -f /cdrom/clavier.kmap.gz ] ; then
    loadkeys /cdrom/clavier.kmap.gz
fi
cd /ramdisk/home
cp /cdrom/home.tar.bfe .
bcrypt home.tar.bfe
tar xf home.tar
rm home.tar
mkdir -p /ramdisk/home/agreg/public
cd /cdrom/home
cp -a . /ramdisk/home/agreg/public
cd  /ramdisk/home/agreg/public
if [ -f /cdrom/droitshome.txt ] ; then
    cp /cdrom/droitshome.txt /tmp
    chmod +x /tmp/droitshome.txt
    /tmp/droitshome.txt
    rm /tmp/droitshome.txt
fi
if [ -f /cdrom/liens.cpio ] ; then
    cpio -i < /cdrom/liens.cpio
fi
else
# cas normal
cd  /ramdisk/home/agreg
if [ ! -f /cdrom/home/.perso ] ; then
    cp -a /ROOT/etc/skel/. .
fi
# (cd /cdrom/home ; tar c .) | (cd /ramdisk/home/agreg ; tar x)
cd /cdrom/home
cp -a . /ramdisk/home/agreg
cd  /ramdisk/home/agreg
if [ -f /cdrom/droitshome.txt ] ; then
    cp /cdrom/droitshome.txt /tmp
    chmod +x /tmp/droitshome.txt
    /tmp/droitshome.txt
    rm /tmp/droitshome.txt
fi
if [ -f /cdrom/liens.cpio ] ; then
    cpio -i < /cdrom/liens.cpio
fi
fi
cd /
#chroot /ROOT chmod -R +w /home/agreg
#chroot /ROOT chown -R agreg /home/agreg/
chmod -R +w /ramdisk/home/agreg
chown -R 1000.1000 /ramdisk/home/agreg/
# on conserve des liens vers les syst√®mes de fichiers s√©par√©s
chroot /ROOT mount /proc
chroot /ROOT mount /sys
mkdir -p /ROOT/oldroot/ramdisk
mount -o bind /ramdisk /ROOT/oldroot/ramdisk
mkdir -p /ROOT/oldroot/cdrom
mount -o bind /cdrom /ROOT/oldroot/cdrom
for dir in `ls -d /extension*` ; do
if [ -d /$dir ] ; then
    mkdir -p /ROOT/oldroot/$dir
    mount -o bind /$dir /ROOT/oldroot/$dir
fi
done
umount /proc/bus/usb
umount /proc
umount /sys
echo RAMDISK fini, boot normal.
echo Running init
cd /
exec /bin/run-init /ROOT /sbin/init $* < /ROOT/dev/console > /ROOT/dev/console 2>&1



else
echo "Je n'arrive pas √† trouver un syst√®me de fichier."
echo "Voil√† un shell limit√©."
PS1="agreg# "
export PS1
echo "6" > /proc/sys/kernel/printk
# Allow signals
trap 1 2 3 15
exec /bin/sh
fi
